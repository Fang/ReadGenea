
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ReadGenea"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('ReadGenea')
Loading required package: bitops
ReadGenea 2.5 loaded

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("RGtime")
> ### * RGtime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RGtime
> ### Title: Date time handling for the ReadGenea package.
> ### Aliases: RGtime convert.time as.RGtime format.RGtime axis.RGtime
> ###   pretty.RGtime
> ### Keywords: manip
> 
> ### ** Examples
> 
> as.RGtime("00:01")
[1] 00:01
> #format is automatically set
> convert.time(1:10)
 [1] 00:01.000 00:02.000 00:03.000 00:04.000 00:05.000 00:06.000 00:07.000
 [8] 00:08.000 00:09.000 00:10.000
> convert.time(1:10*1000)
 [1] 00:16 00:33 00:50 01:06 01:23 01:40 01:56 02:13 02:30 02:46
> #we add a different default format
> convert.time(1:10*1000, "%H:%M:%OS3") -> t
> t
 [1] 00:16:40.000 00:33:20.000 00:50:00.000 01:06:40.000 01:23:20.000
 [6] 01:40:00.000 01:56:40.000 02:13:20.000 02:30:00.000 02:46:40.000
> str(t)
Classes 'RGtime', 'numeric'  atomic [1:10] 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000
  ..- attr(*, "format")= chr "%H:%M:%OS3"
> #we override format with our own
> format(t, format = "%a %d/%m/%y %H:%M:%OS3")
 [1] "Thu 01/01/70 00:16:40.000" "Thu 01/01/70 00:33:20.000"
 [3] "Thu 01/01/70 00:50:00.000" "Thu 01/01/70 01:06:40.000"
 [5] "Thu 01/01/70 01:23:20.000" "Thu 01/01/70 01:40:00.000"
 [7] "Thu 01/01/70 01:56:40.000" "Thu 01/01/70 02:13:20.000"
 [9] "Thu 01/01/70 02:30:00.000" "Thu 01/01/70 02:46:40.000"
> 
> #plot calls axis.RGtime automatically. Notice
> #that the format attribute is used.
> plot(t, 1:10)
> #strip out the default format
> t2 = convert.time(t, format = NULL)
> plot(t2, 1:10)
> 
> #image plots are a bit more complex
> 
> Z = matrix(rnorm(100), 10)
> image(x = t, y = t2, z = Z, axes = FALSE)
> axis.RGtime(x = t2, side = 2)
> Axis(x = t, side = 1) #Axis also works
> box() #complete the bounding box
> 
> #custom axes
> plot(t2, 1:10, xaxt = "n")
> axis.RGtime(at = pretty(t2, 20) , side = 1)
> 
> 
> 
> cleanEx()
> nameEx("epoch.apply")
> ### * epoch.apply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: epoch.apply
> ### Title: Compute epochal summary statistics.
> ### Aliases: epoch.apply epoch.mean epoch.sd epoch.median epoch.mad
> ###   epoch.autocor epoch.quantile svm
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> dat <- read.bin(system.file("binfile/TESTfile.bin", package = "ReadGenea")[1]
+     , calibrate = TRUE)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.145 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> 
> #look for the epochs that exceed a certain threshold 50% of the time
> plot(epoch.apply( dat, epoch.size = 3 , 
+     FUN = function(t) mean(abs(svm(t) -1)>0.2)> 0.5 ), type = "l")
> 
> plot(dat[,1], svm(dat), log = "y", pch = ".")
> lines(epoch.mean(dat, incl.date = TRUE), lwd = 2)
> lines(epoch.mean(dat, epoch.size = 30, incl.date = TRUE), col = 2, lwd = 2)
> #this should give all the same results, but by a different way
> lines(epoch.apply(dat, epoch.size = 30, 
+     FUN = function(A) mean(svm(A, FALSE)), incl.date = TRUE), col = 3)
> epsize = 30; lines(epoch.apply(dat, epoch.size = epsize, 
+     FUN = function(t) median(t[,1])), epoch.apply(dat, epoch.size = epsize, 
+     FUN = function(A) mean(svm(A, FALSE))), col = 4)
> #note this is different
> lines(epoch.apply(dat, epoch.size = epsize, 
+     FUN = function(t) median(t[,1])),epoch.apply(dat, epoch.size = epsize, 
+     FUN = function(A) mean(svm(A, sqrt = TRUE)))^2, col = 5)
> 
> #plot some statistics
> par(mfrow = c(5,1), mar = c(1,4.5,1,1))
> plot(epoch.sd(dat), type="l")
> plot(epoch.median(dat), type= "l")
> plot(epoch.mad(dat), type= "l")
> plot(epoch.autocor(dat), type= "l")
> tmp = epoch.quantile(dat, quantiles= c(0.1, 0.25, 0.5, 0.75, 0.9)); matplot(tmp, type = "l")
> 
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("get.intervals")
> ### * get.intervals
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get.intervals
> ### Title: Methods for processing and summarising AccData.
> ### Aliases: AccData get.intervals [.AccData $.AccData print.AccData
> ###   plot.AccData
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> binfile  = system.file("binfile/TESTfile.bin", package = "ReadGenea")[1]
> 
> #Read in the entire file, calibrated
> procfile<-read.bin(binfile)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.125 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> print(procfile)
ReadGenea dataset:  31200 records at 100 Hz (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
[ TESTfile.bin ]
> procfile$data.out[1:5,]
         timestamp                  x              y                z light
[1,] 1337791670.00  0.023516414141414 -0.88728256668 -0.1007852375344     0
[2,] 1337791670.01 -0.000157828282828 -1.08828759181 -0.0929328621908     0
[3,] 1337791670.02  0.023516414141414 -1.04190181678 -0.0733019238320     0
[4,] 1337791670.03  0.011679292929293 -1.06509470429 -0.0654495484884     0
[5,] 1337791670.04  0.031407828282828 -1.11148047932 -0.1400471142521     0
     button temperature
[1,]      0        25.8
[2,]      0        25.8
[3,]      0        25.8
[4,]      0        25.8
[5,]      0        25.8
> 
> #Uncalibrated, mmap off
> procfile2<-read.bin(binfile, calibrate = FALSE)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.097 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> procfile2$data.out[1:5,]
         timestamp  x    y   z light button temperature
[1,] 1337791670.00 17 -225 -40     0      0        25.8
[2,] 1337791670.01 11 -277 -38     0      0        25.8
[3,] 1337791670.02 17 -265 -33     0      0        25.8
[4,] 1337791670.03 14 -271 -31     0      0        25.8
[5,] 1337791670.04 19 -283 -50     0      0        25.8
> 
> #Read in again, reusing already computed mmap pagerefs
> procfile3<-read.bin(binfile, pagerefs = procfile2$pagerefs )
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.125 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> 
> #Downsample by a factor of 10
> procfilelo<-read.bin(binfile, downsample = 10)
Downsampling to  10  Hz 
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.085 secs .
Loaded 3120 records (Approx  0 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.900 (Wed) 
> print(procfilelo)
ReadGenea dataset:  3120 records at 10 Hz (Approx  0 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.900 (Wed) 
[ TESTfile.bin ]
> object.size(procfilelo) / object.size(procfile)
0.103886748580938 bytes
> 
> #Read in a 1 minute interval
> procfileshort <- read.bin(binfile, start = "16:50", end = "16:51")
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.018 secs .
Loaded 6600 records (Approx  0 MB of RAM)
12-05-23 16:49:59.000 (Wed)  to  12-05-23 16:51:04.990 (Wed) 
> print(procfileshort)
ReadGenea dataset:  6600 records at 100 Hz (Approx  0 MB of RAM)
12-05-23 16:49:59.000 (Wed)  to  12-05-23 16:51:04.990 (Wed) 
[ TESTfile.bin ]
> 
> ##NOT RUN: Read, and save as a R workspace
> #read.bin(binfile, outfile="tmp.Rdata")
> #print(load("tmp.Rdata"))
> #print(processedfile)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("hanning.window")
> ### * hanning.window
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hanning.window
> ### Title: Computes the Coefficients of a Hanning or Uniform Window.
> ### Aliases: hanning.window uniform.window
> ### Keywords: ts
> 
> ### ** Examples
> hanning.window(10)
 [1] 0.000000000000 0.116977778441 0.413175911167 0.750000000000 0.969846310393
 [6] 0.969846310393 0.750000000000 0.413175911167 0.116977778441 0.000000000000
> 
> x<-rnorm(500)
> y<-stft(x, wtype="hanning.window")
================================================================================
> plot(y)
Error in xy.coords(x, y, xlabel, ylabel, log) : 
  'x' is a list, but does not have components 'x' and 'y'
Calls: plot -> plot.default -> xy.coords
Execution halted
