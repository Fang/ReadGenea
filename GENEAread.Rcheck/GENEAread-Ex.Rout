
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "GENEAread"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('GENEAread')
Loading required package: bitops
GENEAread 1.0 loaded

> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AccData")
> ### * AccData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AccData
> ### Title: Methods for processing and summarising AccData.
> ### Aliases: AccData [.AccData $.AccData print.AccData plot.AccData
> ###   summary.AccData
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> binfile  = system.file("binfile/TESTfile.bin", package = "GENEAread")[1]
> 
> #Read in the entire file, calibrated
> procfile<-read.bin(binfile)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.142 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> 
> print(procfile)
GENEAread dataset:  31200 records at 100 Hz (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
[ TESTfile.bin ]
> summary(procfile)
        Min.      1st Qu.       Median         Mean      3rd Qu.         Max. 
0.0581691866 0.4191740870 0.4828117050 0.6204790930 0.7199023660 1.6533637100 
> 
> plot(procfile$temperature)
> plot(procfile[,c(1,7)])
> 
> 
> 
> 
> cleanEx()
> nameEx("GRtime")
> ### * GRtime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: GRtime
> ### Title: Date time handling for the GENEAread package.
> ### Aliases: GRtime convert.time as.GRtime format.GRtime axis.GRtime
> ###   pretty.GRtime
> ### Keywords: methods
> 
> ### ** Examples
> 
> as.GRtime("00:01")
[1] 00:01
> #format is automatically set
> convert.time(1:10)
 [1] 00:01.000 00:02.000 00:03.000 00:04.000 00:05.000 00:06.000 00:07.000
 [8] 00:08.000 00:09.000 00:10.000
> convert.time(1:10*1000)
 [1] 00:16 00:33 00:50 01:06 01:23 01:40 01:56 02:13 02:30 02:46
> #we add a different default format
> convert.time(1:10*1000, "%H:%M:%OS3") -> t
> t
 [1] 00:16:40.000 00:33:20.000 00:50:00.000 01:06:40.000 01:23:20.000
 [6] 01:40:00.000 01:56:40.000 02:13:20.000 02:30:00.000 02:46:40.000
> str(t)
Classes 'GRtime', 'numeric'  atomic [1:10] 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000
  ..- attr(*, "format")= chr "%H:%M:%OS3"
> #we override format with our own
> format(t, format = "%a %d/%m/%y %H:%M:%OS3")
 [1] "Thu 01/01/70 00:16:40.000" "Thu 01/01/70 00:33:20.000"
 [3] "Thu 01/01/70 00:50:00.000" "Thu 01/01/70 01:06:40.000"
 [5] "Thu 01/01/70 01:23:20.000" "Thu 01/01/70 01:40:00.000"
 [7] "Thu 01/01/70 01:56:40.000" "Thu 01/01/70 02:13:20.000"
 [9] "Thu 01/01/70 02:30:00.000" "Thu 01/01/70 02:46:40.000"
> 
> #plot calls axis.GRtime automatically. Notice
> #that the format attribute is used.
> plot(t, 1:10)
> #strip out the default format
> t2 = convert.time(t, format = NULL)
> plot(t2, 1:10)
> 
> #image plots are a bit more complex
> 
> Z = matrix(rnorm(100), 10)
> image(x = t, y = t2, z = Z, axes = FALSE)
> axis.GRtime(x = t2, side = 2)
> Axis(x = t, side = 1) #Axis also works
> box() #complete the bounding box
> 
> #custom axes
> plot(t2, 1:10, xaxt = "n")
> axis.GRtime(at = pretty(t2, 20) , side = 1)
> 
> 
> 
> cleanEx()
> nameEx("epoch.apply")
> ### * epoch.apply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: epoch.apply
> ### Title: Compute epochal summary statistics.
> ### Aliases: epoch.apply epoch.mean epoch.sd epoch.median epoch.mad
> ###   epoch.autocor epoch.quantile svm
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> dat <- read.bin(system.file("binfile/TESTfile.bin", package = "GENEAread")[1]
+     , calibrate = TRUE)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.142 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> 
> #look for the epochs that exceed a certain threshold 50% of the time
> plot(epoch.apply( dat, epoch.size = 3 , 
+     FUN = function(t) mean(abs(svm(t) -1)>0.2)> 0.5 ), type = "l")
> 
> plot(dat[,1], svm(dat), log = "y", pch = ".")
> lines(epoch.mean(dat, incl.date = TRUE), lwd = 2)
> lines(epoch.mean(dat, epoch.size = 30, incl.date = TRUE), col = 2, lwd = 2)
> #this should give all the same results, but by a different way
> lines(epoch.apply(dat, epoch.size = 30, 
+     FUN = function(A) mean(svm(A, FALSE)), incl.date = TRUE), col = 3)
> epsize = 30; lines(epoch.apply(dat, epoch.size = epsize, 
+     FUN = function(t) median(t[,1])), epoch.apply(dat, epoch.size = epsize, 
+     FUN = function(A) mean(svm(A, FALSE))), col = 4)
> #note this is different
> lines(epoch.apply(dat, epoch.size = epsize, 
+     FUN = function(t) median(t[,1])),epoch.apply(dat, epoch.size = epsize, 
+     FUN = function(A) mean(svm(A, sqrt = TRUE)))^2, col = 5)
> 
> #plot some statistics
> par(mfrow = c(5,1), mar = c(1,4.5,1,1))
> plot(epoch.sd(dat), type="l")
> plot(epoch.median(dat), type= "l")
> plot(epoch.mad(dat), type= "l")
> plot(epoch.autocor(dat), type= "l")
> tmp = epoch.quantile(dat, quantiles= c(0.1, 0.25, 0.5, 0.75, 0.9)); matplot(tmp, type = "l")
> 
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("get.intervals")
> ### * get.intervals
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get.intervals
> ### Title: Extract an interval of data.
> ### Aliases: get.intervals print.VirtAccData VirtAccData
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> binfile  = system.file("binfile/TESTfile.bin", package = "GENEAread")[1]
> 
> #Read in a highly downsampled version of the file
> procfile<-read.bin(binfile, downsample = 100)
Downsampling to  1  Hz 
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.121 secs .
Loaded 312 records (Approx  0 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.000 (Wed) 
> print(procfile)
GENEAread dataset:  312 records at 1 Hz (Approx  0 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.000 (Wed) 
[ TESTfile.bin ]
> #Plot the x component
> plot(procfile[,1:2], type = "l")
> 
> #Overlay some segments in different colour
> lines(get.intervals(procfile, start = 0.4, end = 0.5, time.format = "prop", incl.date = TRUE)[,1:2], col=2) 
Extracting time interval:  16:49:54 16:50:25 
> lines(get.intervals(procfile, start = 0.4, end = 5, time.format = "sec", incl.date = TRUE)[,1:2], col=3) 
Extracting time interval:  47:50.000 47:54.000 
> lines(get.intervals(procfile, start = "16:51", end = "16:52", time.format = "time", incl.date = TRUE)[,1:2], col=4) 
Extracting time interval:  16:51:00 16:52:01 
> #Note that measurements will depend on the downsampling rate, not the original sampling rate of the data
> lines(get.intervals(procfile, start = 100, length = 10, time.format = "measurement", incl.date = TRUE)[,1:2], col=5) 
Extracting time interval:  16:49:29 16:49:39 
> #This is also understood
> lines(get.intervals(procfile, start = "16:52:10", 30,  incl.date = TRUE)[,1:2], col=6) 
Extracting time interval:  16:52:10 16:52:40 
> 
> #Now load in virtually
> virtfile<-read.bin(binfile, virtual = TRUE)
Number of pages in binary file: 104 
Processing...

Virtually loaded 31200 records at 100 Hz (Will take up approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:02.000 (Wed) 
> #Notice that get.intervals with simplify = FALSE gives a genuine AccData object
> realfile = get.intervals(virtfile, start = 0.5, end = 1, simplify = FALSE)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.046 secs .
Loaded 15900 records (Approx  1 MB of RAM)
12-05-23 16:50:23.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> virtfile
[Virtual GENEAread dataset]:  31200 records at 100 Hz (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:02.000 (Wed) 
[ TESTfile.bin ]
> realfile
GENEAread dataset:  15900 records at 100 Hz (Approx  1 MB of RAM)
12-05-23 16:50:23.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
[ TESTfile.bin ]
> #get.intervals calls read.bin automatically
> points(get.intervals(virtfile, start = "16:52:10", "16:52:40",  incl.date = TRUE)[,1:2], col=4, pch = ".") 
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.011 secs .
Loaded 3600 records (Approx  0 MB of RAM)
12-05-23 16:52:08.000 (Wed)  to  12-05-23 16:52:43.990 (Wed) 
Extracting time interval:  16:52:08 16:52:43 
> 
> #Alternatively, re-read procfile at a different resampling rate.
> lines(get.intervals(procfile, start = "16:49:00", "16:49:30",  incl.date = TRUE, read.from.file = TRUE, downsample = 300)[,1:2], col=2) 
Downsampling to  0.33  Hz 
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.009 secs .
Loaded 12 records (Approx  0 MB of RAM)
12-05-23 16:48:59.000 (Wed)  to  12-05-23 16:49:32.000 (Wed) 
Extracting time interval:  16:48:59 16:49:32 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("hanning.window")
> ### * hanning.window
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hanning.window
> ### Title: Computes the Coefficients of a Hanning or Uniform Window.
> ### Aliases: hanning.window uniform.window
> ### Keywords: ts
> 
> ### ** Examples
> hanning.window(10)
 [1] 0.000000000000 0.116977778441 0.413175911167 0.750000000000 0.969846310393
 [6] 0.969846310393 0.750000000000 0.413175911167 0.116977778441 0.000000000000
> 
> x<-rnorm(500)
> y<-stft(x, wtype="hanning.window")
================================================================================
> plot(y)
> 
> 
> 
> cleanEx()
> nameEx("header.info")
> ### * header.info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: header.info
> ### Title: Get header info from GENEA output (.bin) file
> ### Aliases: header.info
> ### Keywords: IO
> 
> ### ** Examples
> 
> 
> fileheader <- header.info(system.file("binfile/TESTfile.bin", package = "GENEAread")[1], more = TRUE)
> print(fileheader)
                                            Value
Device_Unique_Serial_Code                  011073
Measurement_Frequency                      100 Hz
Measurement_Period                      168 Hours
Start_Time                0000-00-00 00:00:00:000
Study_Centre                 TESTCenter          
Study_Code                   TESTCode            
Investigator_ID              TESTID              
Exercise_Type                Sample Code         
Device_Location_Code                   left wrist
Subject_Code                 TESTSubject         
Date_of_Birth                            1900-1-1
Sex                                          male
Height                                        160
Weight                                        100
Handedness_Code                             right
Number_of_Pages                               104
> attr(fileheader, "calibration")
$tzone
[1] 1

$xgain
[1] 25344

$xoffset
[1] 1104

$ygain
[1] 25870

$yoffset
[1] 454

$zgain
[1] 25470

$zoffset
[1] -1433

$volts
[1] 300

$lux
[1] 800

$npages
[1] 104

$firstpage
[1] 0

$freq
[1] 100

$t1
[1] 1337791670

$t1c
[1] "2012-05-23 16:47:50 BST"

$inc
[1] 0.01

$t1midnight
[1] 1337731200

$headlines
[1] 59

> 
> 
> 
> cleanEx()
> nameEx("parse.time")
> ### * parse.time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parse.time
> ### Title: Parses a character time representation to another format.
> ### Aliases: parse.time
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
> t1 = parse.time("2012-06-21 13:04:01"); print(t1)
[1] 1340283841
> parse.time("21/06/12 13:04:01") #gives the same result
[1] 1340283841
> 
> parse.time(c("19/07/70", "20/07/70"), format = "days")
[1] 199 200
> #results here will depend on your locale
> parse.time(c("19/07/70", "20/07/70"), format = "POSIX", tzone = -4)
[1] "1970-07-19 05:00:00 BST" "1970-07-20 05:00:00 BST"
> 
> #one is the same day, one can only find a match the next day
> parse.time("13:05", start = t1) - t1
[1] 59
> parse.time("13:00", start = t1) - t1
[1] 86159
> #asking to wait 1 midnight means both times are considered as 
> #times on the same, full day of data
> parse.time(c("1 13:05", "1 13:00"), start = t1) - t1
[1] 86459 86159
> #2012-06-21 is a Thursday, so this is equivalent
> parse.time(c("Fri 13:05", "Fri 13:00"), start = t1) - t1
[1] 86459 86159
> #Longer form days of the week are also understood. Note that 
> #the first day does not get matched.
> parse.time(c("Thursday 13:05", "Thursday 13:00"), start = t1) - t1
[1] 604859 604559
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.stft")
> ### * plot.stft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.stft
> ### Title: Plots and prints Short Time Fourier Transforms
> ### Aliases: plot.stft print.stft
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> #Real data
> binfile  = system.file("binfile/TESTfile.bin", package = "GENEAread")[1]
> 
> #Read in the entire file, calibrated
> procfile<-read.bin(binfile)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.142 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> #Create stft object
> obj = stft(procfile, type = "svm", quiet = TRUE)
Extracting time interval:  16:47:50 16:53:01 
> #Look at it
> print(obj)
STFT object:
12-05-23 16:47:54.990 (Wed)  to  12-05-23 16:52:54.990 (Wed) 
61 increments of 5 s 
Window size:  1000 ( 10 s ) -> f resolution:  0.1 Hz
[SVM][Reassign]
------ 
{ stft(X = procfile, type = "svm", quiet = TRUE) }
> 
> plot(obj, cex = 5)
> plot(obj, showmax = FALSE, cex = 5) #suppress principals
> 
> #pval plot
> plot(obj, mode = "pval", cex = 5)
> #disable reassigned stft
> plot(obj, mode = "pval", reassign = FALSE) 
> #median smoothing
> plot(obj, mode = "pval", reassign = FALSE, median = TRUE) 
> #log scale frequency, no top bar
> dev.new(); plot(obj, mode = "pval", reassign = FALSE, topthresh = Inf, log = "y") 
> 
> 
> 
> cleanEx()
> nameEx("read.bin")
> ### * read.bin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read.bin
> ### Title: File processing function for binary files.
> ### Aliases: read.bin
> ### Keywords: IO
> 
> ### ** Examples
> 
> 
> binfile  = system.file("binfile/TESTfile.bin", package = "GENEAread")[1]
> 
> #Read in the entire file, calibrated
> procfile<-read.bin(binfile)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.139 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> print(procfile)
GENEAread dataset:  31200 records at 100 Hz (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
[ TESTfile.bin ]
> procfile$data.out[1:5,]
         timestamp                  x              y                z light
[1,] 1337791670.00  0.023516414141414 -0.88728256668 -0.1007852375344     0
[2,] 1337791670.01 -0.000157828282828 -1.08828759181 -0.0929328621908     0
[3,] 1337791670.02  0.023516414141414 -1.04190181678 -0.0733019238320     0
[4,] 1337791670.03  0.011679292929293 -1.06509470429 -0.0654495484884     0
[5,] 1337791670.04  0.031407828282828 -1.11148047932 -0.1400471142521     0
     button temperature
[1,]      0        25.8
[2,]      0        25.8
[3,]      0        25.8
[4,]      0        25.8
[5,]      0        25.8
> 
> #Uncalibrated, mmap off
> procfile2<-read.bin(binfile, calibrate = FALSE)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.102 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> procfile2$data.out[1:5,]
         timestamp  x    y   z light button temperature
[1,] 1337791670.00 17 -225 -40     0      0        25.8
[2,] 1337791670.01 11 -277 -38     0      0        25.8
[3,] 1337791670.02 17 -265 -33     0      0        25.8
[4,] 1337791670.03 14 -271 -31     0      0        25.8
[5,] 1337791670.04 19 -283 -50     0      0        25.8
> 
> #Read in again, reusing already computed mmap pagerefs
> procfile3<-read.bin(binfile, pagerefs = procfile2$pagerefs )
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.132 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> 
> #Downsample by a factor of 10
> procfilelo<-read.bin(binfile, downsample = 10)
Downsampling to  10  Hz 
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.088 secs .
Loaded 3120 records (Approx  0 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.900 (Wed) 
> print(procfilelo)
GENEAread dataset:  3120 records at 10 Hz (Approx  0 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.900 (Wed) 
[ TESTfile.bin ]
> object.size(procfilelo) / object.size(procfile)
0.103886748580938 bytes
> 
> #Read in a 1 minute interval
> procfileshort <- read.bin(binfile, start = "16:50", end = "16:51")
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.019 secs .
Loaded 6600 records (Approx  0 MB of RAM)
12-05-23 16:49:59.000 (Wed)  to  12-05-23 16:51:04.990 (Wed) 
> print(procfileshort)
GENEAread dataset:  6600 records at 100 Hz (Approx  0 MB of RAM)
12-05-23 16:49:59.000 (Wed)  to  12-05-23 16:51:04.990 (Wed) 
[ TESTfile.bin ]
> 
> ##NOT RUN: Read, and save as a R workspace
> #read.bin(binfile, outfile="tmp.Rdata")
> #print(load("tmp.Rdata"))
> #print(processedfile)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("stft")
> ### * stft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stft
> ### Title: Computes Short Time Fourier Transforms
> ### Aliases: stft
> ### Keywords: ts
> 
> ### ** Examples
> 
> #Some artificial data
> time = 1:5000
> #sum of two sine curves at 0.3 Hz and 0.05 Hz
> f1 = 0.3; f2 = 0.05
> sin1 = sin(time * f1 * 2*pi)
> sin2 = sin(time * f2 * 2*pi)
> #add a bit of noise
> signal = sin1 + sin2 + 1*rnorm(5000)
> #non-reassigned
> stft(signal, plot = TRUE, reassign = FALSE, win = 100)
================================================================================
STFT object:
70-01-01 00:00:50.000 (Thu)  to  70-01-01 01:22:30.000 (Thu) 
99 increments of 50 s 
Window size:  100 ( 100 s ) -> f resolution:  0.01 Hz

------ 
{ stft(X = signal, reassign = FALSE, plot.it = TRUE, win = 100) }
> #reassigned
> stft(signal, plot = TRUE, reassign = TRUE, win = 100)
================================================================================
STFT object:
70-01-01 00:00:50.000 (Thu)  to  70-01-01 01:22:30.000 (Thu) 
99 increments of 50 s 
Window size:  100 ( 100 s ) -> f resolution:  0.01 Hz
[Reassign]
------ 
{ stft(X = signal, reassign = TRUE, plot.it = TRUE, win = 100) }
> 
> #add a third component: varying frequency.
> stft(signal + sin( cumsum(seq(f2, f1, length = 5000))*2*pi), plot = TRUE, reassign = TRUE, win = 100)
================================================================================
STFT object:
70-01-01 00:00:50.000 (Thu)  to  70-01-01 01:22:30.000 (Thu) 
99 increments of 50 s 
Window size:  100 ( 100 s ) -> f resolution:  0.01 Hz
[Reassign]
------ 
{ stft(X = signal + sin(cumsum(seq(f2, f1, length = 5000)) * 2 *      pi), reassign = TRUE, plot.it = TRUE, win = 100) }
> 
> #Real data
> binfile  = system.file("binfile/TESTfile.bin", package = "GENEAread")[1]
> 
> #Read in the entire file, calibrated
> procfile<-read.bin(binfile)
Number of pages in binary file: 104 
Processing...
================================================================================
Processing took: 0.116 secs .
Loaded 31200 records (Approx  2 MB of RAM)
12-05-23 16:47:50.000 (Wed)  to  12-05-23 16:53:01.990 (Wed) 
> #Default is mv
> stft(procfile, plot.it = TRUE)
Extracting time interval:  16:47:50 16:53:01 
================================================================================
================================================================================
================================================================================
STFT object:
12-05-23 16:47:54.990 (Wed)  to  12-05-23 16:52:54.990 (Wed) 
61 increments of 5 s 
Window size:  1000 ( 10 s ) -> f resolution:  0.1 Hz
[MV- 123 ][Reassign]
------ 
{ stft(X = procfile, plot.it = TRUE) }
> #Try sum?
> stft(procfile, plot.it = TRUE, type = "sum", reassign = FALSE)
Extracting time interval:  16:47:50 16:53:01 
================================================================================
================================================================================
================================================================================
STFT object:
12-05-23 16:47:54.990 (Wed)  to  12-05-23 16:52:54.990 (Wed) 
61 increments of 5 s 
Window size:  1000 ( 10 s ) -> f resolution:  0.1 Hz
[SUM- 123 ]
------ 
{ stft(X = procfile, type = "sum", reassign = FALSE, plot.it = TRUE) }
> 
> #Just look at the last 50% of the data
> stft(procfile, start = 0.5, plot.it = TRUE)
Extracting time interval:  16:50:25 16:53:01 
================================================================================
================================================================================
================================================================================
STFT object:
12-05-23 16:50:30.980 (Wed)  to  12-05-23 16:52:55.980 (Wed) 
30 increments of 5 s 
Window size:  1000 ( 10 s ) -> f resolution:  0.1 Hz
[MV- 123 ][Reassign]
------ 
{ stft(X = procfile, start = 0.5, plot.it = TRUE) }
> 
> #not reassigned, svm
> stft(procfile, type = "svm", reassign = FALSE, plot.it = TRUE)
Extracting time interval:  16:47:50 16:53:01 
================================================================================
STFT object:
12-05-23 16:47:54.990 (Wed)  to  12-05-23 16:52:54.990 (Wed) 
61 increments of 5 s 
Window size:  1000 ( 10 s ) -> f resolution:  0.1 Hz
[SVM]
------ 
{ stft(X = procfile, type = "svm", reassign = FALSE, plot.it = TRUE) }
> #a narrower 5 second window means better time resolution
> stft(procfile, type = "svm", reassign = FALSE, plot.it = TRUE, win = 5)
Extracting time interval:  16:47:50 16:53:01 
================================================================================
STFT object:
12-05-23 16:47:52.490 (Wed)  to  12-05-23 16:52:57.490 (Wed) 
123 increments of 2.5 s 
Window size:  500 ( 5 s ) -> f resolution:  0.2 Hz
[SVM]
------ 
{ stft(X = procfile, type = "svm", reassign = FALSE, plot.it = TRUE,      win = 5) }
> #choose increments so as not to overlap
> stft(procfile, type = "svm", reassign = FALSE, plot.it = TRUE, win = 5, inc = 5)
Extracting time interval:  16:47:50 16:53:01 
================================================================================
STFT object:
12-05-23 16:47:52.490 (Wed)  to  12-05-23 16:52:57.490 (Wed) 
62 increments of 5 s 
Window size:  500 ( 5 s ) -> f resolution:  0.2 Hz
[SVM]
------ 
{ stft(X = procfile, type = "svm", reassign = FALSE, plot.it = TRUE,      win = 5, inc = 5) }
> #uniform windows
> stft(procfile, type = "svm", reassign = FALSE, plot.it = TRUE, wtype = "uniform.window")
Extracting time interval:  16:47:50 16:53:01 
================================================================================
STFT object:
12-05-23 16:47:54.990 (Wed)  to  12-05-23 16:52:54.990 (Wed) 
61 increments of 5 s 
Window size:  1000 ( 10 s ) -> f resolution:  0.1 Hz
[SVM]
------ 
{ stft(X = procfile, type = "svm", reassign = FALSE, plot.it = TRUE,      wtype = "uniform.window") }
> 
> #Svm, reassigned, quietly
> obj = stft(procfile, type = "svm", quiet = TRUE)
Extracting time interval:  16:47:50 16:53:01 
> plot(obj, cex = 3, showmax = FALSE, mode = "pval")
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  12.99 0.2 13.22 NA NA 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
